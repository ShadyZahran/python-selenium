{"uid":"8bbb3bd9db68b176","name":"test_get_customer_accounts","fullName":"tests.api.test_user_api#test_get_customer_accounts","historyId":"e11613af6e46548edfcb1b565122e869","time":{"start":1737314545592,"stop":1737314545992,"duration":400},"status":"broken","statusMessage":"Exception: (400, 'Bad Request')","statusTrace":"backend_api = <interfaces.parabank_backend_api.BackendAPI object at 0x7f8d1056a930>\n\n    def test_get_customer_accounts(backend_api: BackendAPI) -> None:\n        customer_id: int = 12212\n        customer_accounts_list: list[Account] = (\n            backend_api.customers_controller.get_customer_accounts(customer_id)\n        )\n        for customer_account in customer_accounts_list:\n            logger.info(customer_account)\n    \n>       account: Account = backend_api.accounts_controller.get_account(12345)\n\ntests/api/test_user_api.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <interfaces.parabank_backend_api.BackendAPI.AccountsController object at 0x7f8d107869c0>\naccount_id = 12345\n\n    def get_account(self, account_id: int) -> Account:\n        response = self._get_acount_by_id(account_id)\n        if response.status_code == HTTPStatus.OK:\n            return Account(**response.json())\n        else:\n>           raise Exception(response.status_code, response.reason)\nE           Exception: (400, 'Bad Request')\n\ninterfaces/parabank_backend_api.py:146: Exception","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"backend_api","time":{"start":1737314545173,"stop":1737314545173,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"Exception: (400, 'Bad Request')","statusTrace":"backend_api = <interfaces.parabank_backend_api.BackendAPI object at 0x7f8d1056a930>\n\n    def test_get_customer_accounts(backend_api: BackendAPI) -> None:\n        customer_id: int = 12212\n        customer_accounts_list: list[Account] = (\n            backend_api.customers_controller.get_customer_accounts(customer_id)\n        )\n        for customer_account in customer_accounts_list:\n            logger.info(customer_account)\n    \n>       account: Account = backend_api.accounts_controller.get_account(12345)\n\ntests/api/test_user_api.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <interfaces.parabank_backend_api.BackendAPI.AccountsController object at 0x7f8d107869c0>\naccount_id = 12345\n\n    def get_account(self, account_id: int) -> Account:\n        response = self._get_acount_by_id(account_id)\n        if response.status_code == HTTPStatus.OK:\n            return Account(**response.json())\n        else:\n>           raise Exception(response.status_code, response.reason)\nE           Exception: (400, 'Bad Request')\n\ninterfaces/parabank_backend_api.py:146: Exception","steps":[],"attachments":[{"uid":"b9b7d3dd8d54cc38","name":"log","source":"b9b7d3dd8d54cc38.txt","type":"text/plain","size":858}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"backend_api::0","time":{"start":1737314616022,"stop":1737314616022,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_user_api"},{"name":"host","value":"fv-az1690-387"},{"name":"thread","value":"1983-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"8bbb3bd9db68b176.json","parameterValues":[]}